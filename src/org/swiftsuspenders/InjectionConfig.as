/** Copyright (c) 2009 the original author or authors* * Permission is hereby granted to use, modify, and distribute this file * in accordance with the terms of the license agreement accompanying it.*/package org.swiftsuspenders{	import flash.utils.Dictionary;		import org.swiftsuspenders.injectionresults.IInjectionResult;	import org.swiftsuspenders.injectionresults.InjectClassResult;	import org.swiftsuspenders.injectionresults.InjectNullResult;	import org.swiftsuspenders.injectionresults.InjectSingletonResult;	import org.swiftsuspenders.injectionresults.InjectValueResult;
		public class InjectionConfig 	{		/*******************************************************************************************		 *								public properties										   *		 *******************************************************************************************/		public var request : Class;		public var response : Object;		public var injectionType : int;		public var injectionName : String;		public var injector : Injector;						/*******************************************************************************************		 *								public methods											   *		 *******************************************************************************************/		public function InjectionConfig(request : Class, response : Object, 			injectionType : int, injectionName : String, injector : Injector)		{			this.request = request;			this.response = response;			this.injectionType = injectionType;			this.injectionName = injectionName;			this.injector = injector;		}				public function getResponse(singletons : Dictionary) : Object		{			return createResultByInjectionType().getResponse(injector, singletons);		}						/*******************************************************************************************		 *								private methods											   *		 *******************************************************************************************/		private function createResultByInjectionType() : IInjectionResult		{			switch (injectionType)			{				case InjectionType.CLASS:				{					return new InjectClassResult(this);				}				case InjectionType.VALUE:				{					return new InjectValueResult(this);				}				case InjectionType.SINGLETON:				{					return new InjectSingletonResult(this);				}				default:				{					break;				}			}			return new InjectNullResult();		}	}}